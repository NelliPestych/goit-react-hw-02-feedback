{"version":3,"sources":["Buttons.js","Statistics.js","Notification.js","Feedback.js","index.js"],"names":["Buttons","change1","change2","change3","onClick","Statistics","good","neutral","bad","totalFeed","positive","Notification","message","Feedback","state","handleChange1","e","setState","handleChange2","handleChange3","total","Object","values","this","countTotalFeedback","countPositiveFeedbackPercentage","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAEe,SAASA,EAAT,GAAiD,IAA9BC,EAA6B,EAA7BA,QAASC,EAAoB,EAApBA,QAASC,EAAW,EAAXA,QAClD,OACE,6BACE,4BAAQC,QAASH,GAAjB,QACA,4BAAQG,QAASF,GAAjB,WACA,4BAAQE,QAASD,GAAjB,QCLS,SAASE,EAAT,GAMX,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,QACAC,EAGC,EAHDA,IACAC,EAEC,EAFDA,UACAC,EACC,EADDA,SAEA,OACE,6BACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OCbS,SAASC,EAAT,GAAoC,IAAZC,EAAW,EAAXA,QACrC,OACA,2BAAIA,G,ICCeC,E,4MACnBC,MAAQ,CACNR,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPO,cAAgB,SAACC,GACf,EAAKC,SAAS,CAAEX,KAAM,EAAKQ,MAAMR,KAAO,K,EAG1CY,cAAgB,SAACF,GACf,EAAKC,SAAS,CAAEV,QAAS,EAAKO,MAAMP,QAAU,K,EAGhDY,cAAgB,SAACH,GACf,EAAKC,SAAS,CAAET,IAAK,EAAKM,MAAMN,IAAM,K,uDAMtC,IAFA,IACIY,EAAQ,EACZ,MAFeC,OAAOC,OAAOC,KAAKT,OAElC,eAA4B,CAC1BM,GADc,KAGhB,IAAMI,EAAqBJ,EAErBK,EACe,IAAlBF,KAAKT,MAAMR,KAAckB,EAC5B,OACE,6BACE,kBAACxB,EAAD,CACEC,QAASsB,KAAKR,cACdb,QAASqB,KAAKL,cACdf,QAASoB,KAAKJ,gBAEfC,EAAQ,EACP,kBAACf,EAAD,CACEC,KAAMiB,KAAKT,MAAMR,KACjBC,QAASgB,KAAKT,MAAMP,QACpBC,IAAKe,KAAKT,MAAMN,IAChBC,UAAWe,EACXd,SAAUe,IAET,kBAACd,EAAD,CAAcC,QAAQ,2B,GA5CGc,IAAMC,WCE5CC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.f0ac77e2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function Buttons({ change1, change2, change3 }) {\r\n  return (\r\n    <div>\r\n      <button onClick={change1}>good</button>\r\n      <button onClick={change2}>neutral</button>\r\n      <button onClick={change3}>bad</button>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Statistics({\r\n  good,\r\n  neutral,\r\n  bad,\r\n  totalFeed,\r\n  positive,\r\n}) {\r\n  return (\r\n    <div>\r\n      <p>good: {good}</p>\r\n      <p>neutral: {neutral}</p>\r\n      <p>bad: {bad}</p>\r\n      <p>total: {totalFeed}</p>\r\n      <p>positive feedback: {positive} %</p>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Notification({ message }) {\r\n  return (\r\n  <p>{message}</p>\r\n  );\r\n}","import React, { Component } from \"react\";\r\nimport Buttons from \"./Buttons\";\r\nimport Statistics from \"./Statistics\";\r\nimport Notification from \"./Notification\";\r\n\r\nexport default class Feedback extends React.Component {\r\n  state = {\r\n    good: 0,\r\n    neutral: 0,\r\n    bad: 0,\r\n  };\r\n\r\n  handleChange1 = (e) => {\r\n    this.setState({ good: this.state.good + 1 });\r\n  };\r\n\r\n  handleChange2 = (e) => {\r\n    this.setState({ neutral: this.state.neutral + 1 });\r\n  };\r\n\r\n  handleChange3 = (e) => {\r\n    this.setState({ bad: this.state.bad + 1 });\r\n  };\r\n\r\n  render() {\r\n    const values = Object.values(this.state);\r\n    let total = 0;\r\n    for (const value of values) {\r\n      total += value;\r\n    }\r\n    const countTotalFeedback = total;\r\n\r\n    const countPositiveFeedbackPercentage =\r\n      (this.state.good * 100) / countTotalFeedback;\r\n    return (\r\n      <div>\r\n        <Buttons\r\n          change1={this.handleChange1}\r\n          change2={this.handleChange2}\r\n          change3={this.handleChange3}\r\n        />\r\n        {total > 0 ? (\r\n          <Statistics\r\n            good={this.state.good}\r\n            neutral={this.state.neutral}\r\n            bad={this.state.bad}\r\n            totalFeed={countTotalFeedback}\r\n            positive={countPositiveFeedbackPercentage}\r\n          />\r\n        ) : (<Notification message=\"No feedback given\" />)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Feedback from \"./Feedback\";\n\n// import * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Feedback />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}